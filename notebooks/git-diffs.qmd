---
title: "Reviewing differences"
editor: source
---


```{r, echo = FALSE}
source("./R/init.R")
log_info("Called git-differences notebook")
```

## Comparisons with the working directory

Git allows you to compare different versions of files that exist in the repository.
In its vanilla form, the difference functionality compares the differences in a file (or files) in the working directory to the repository version.

Update the contents of the `hello.R` script to match what follows.

```{r}
#| eval: false

cat(paste0("What is your name?\n"));
nme <- readLines("stdin",n=1);
cat(paste0("Hi ",nme, " enter a string please: \n"));
a <- readLines("stdin",n=1);
cat("You entered the following string: ")
cat(paste0(a, "\n"));
cat(a, file = "log.txt")
```

Similarly, edit the `readme.md` file as below.

```{md}
#| eval: false
# first-repo

A demo markdown file for the git workshop.

A new line for testing.

Contains standalone R scripts.
```

Running `git status` you will see that the working directory uncommitted changes

```{bash}
#| eval: false
git status
## On branch main
## Changes not staged for commit:
##   (use "git add <file>..." to update what will be committed)
##   (use "git restore <file>..." to discard changes in working directory)
## 	modified:   hello.R
## 	modified:   readme.md
## 
## no changes added to commit (use "git add" and/or "git commit -a")
```

If we want to know all the changes that were made, we can run `git diff` but let's look at the differences on a file by file basis, comparing the old with the new.

```{bash}
#| eval: false
git diff readme.md
## diff --git a/readme.md b/readme.md
## index 7501d7c..6929e2c 100644
## --- a/readme.md
## +++ b/readme.md
## @@ -4,5 +4,7 @@ A demo markdown file for the git workshop.
## 
##  A new line for testing.
## 
## +Contains standalone R scripts.
## +
```

You interpret the above as follows.

- Anything prefixed with `-` belongs to the old file and anything prefixed with `+` belongs to the new.
- The section labelled with `@@` gives you some context as to where the change has happened. In this case we can see that the text *A minor revision* has been removed and replaced with the text *The main script implements a loop to capture input from a user.*

Now compare the working version of `hello.R` with the repository version, but this time look at the word by word differences:

```{bash}
#| eval: false
git diff --word-diff hello.R
## diff --git a/hello.R b/hello.R
## index 0c6d38c..5f09b06 100644
## --- a/hello.R
## +++ b/hello.R
## @@ -1,7 +1,9 @@
## [-cat("Enter-]{+cat(paste0("What is your name?\n"));+}
## {+nme <- readLines("stdin",n=1);+}
## {+cat(paste0("Hi ",nme, " enter+} a string please: [-");-]{+\n"));+}
## a <- readLines("stdin",n=1);
## cat("You [-entered")-]
## 
## [-str(a);-]
## [-cat( "\n" )-]{+entered the following string: ")+}
## {+cat(paste0(a, "\n"));+}
## cat(a, file = "log.txt")
```

The diffs can take a bit of getting used to and some alternative tools are available that we will put to use in due course (see @sec-diff-tools). 
For now, we will just deal with the commandline output.

Once satisfied that the changes are (at the very least) benign, stage and commit the edits in the usual way:

```{bash}
#| eval: false
git add hello.R readme.md
git commit -m "Revise approach in capturing user input"
```

## Comparisons with staged files

If you want to restrict your attention to the differences that will be made to a repository due to committing staged files, you can use `git diff --cached`.

## Comparisons across commit versions

Once working directory changes have been committed to the repository it is still possible to review the differences between commit.

The most common difference that is of interest is that between the last two commits.
To achieve this run

```{bash}
#| eval: false
git diff HEAD 327170a
```

To inspect differences between any commits, you simply supply the commit hashes that you want to compare:

```{bash}
#| eval: false
git diff b078716 0cd2d52
## diff --git a/myscript.R b/myscript.R
## deleted file mode 100644
## index a12204c..0000000
## --- a/myscript.R
## +++ /dev/null
## @@ -1,3 +0,0 @@
## -library(survival)
## -print("My script")
## -
```

If you want to restrict attention to a particular file, just add the filename that you want to compare to the end of the command

```{bash}
#| eval: false

git diff HEAD 327170a readme.md
## diff --git a/readme.md b/readme.md
## index 6929e2c..7501d7c 100644
## --- a/readme.md
## +++ b/readme.md
## @@ -4,7 +4,5 @@ A demo markdown file for the git workshop.
## 
##  A new line for testing.
## 
## -Contains standalone R scripts.
## -
```

:::{#exr-1}
Can you remember what the command to show what the contents of a commit was?
:::


