
```{r, echo = FALSE}
source("./R/init.R")
log_info("Called preamble notebook")
```

# Preamble (don't skip) {.unnumbered}

## Background reading

There is no point reinventing the wheel, Jenny Bryant motivates the use of version control in the following paper: [Excuse Me, Do You Have a Moment to Talk About Version Control?](https://www.tandfonline.com/doi/full/10.1080/00031305.2017.1399928?needAccess=true)

## Objectives

:::callout-note
There is no getting around it.
You are likely^[Actually with very high probability. Sorry.] going to find some^[Possibly a lot.] of this knowledge base hard and/or frustrating and a bit painful.
Your knowledge will progress in a stepwise fashion - setup, core concepts, collaboration.
Each of these will give you pain, but once you have practice them, they become an intuitive and comforting safety net.
:::

The approach I have taken is purposefully (and unapologetically) applied and a fairly low level perspective on git.
The rationale stems from experience of this being the best way to build a clear and coherent understanding.
Once you have the fundamentals practiced, it is much easier to pick up any git client of your choosing safe in the knowledge that you have some insight into what is going on under the hood and if things go horribly wrong, you have some chance of being able to fix them.

The goal here is for you to gain understanding into the fundamental aspects of revision control and git in particular.
Once you have that base, extending from there will be much easier for you.

The pace of the workshop will be based on the abilities of the audience but there is an expectation that the audience practices the skills in their own time.
The workshop is likely to be run over a few sessions but the exact length is yet to be determined.
It is mainly targeted at analysts that are new to revision control but with some effort is accessible to anyone.

## Command line interfaces

A CLI is software, supplied with the operating system, that you use to interact with your operating system via your keyboard rather than a mouse.
Software that implements such a text interface is often called a command-line interpreter, command processor or a shell.
You enter in commands as text and the system will do something, e.g. create a file, delete a file.
Each of these commands is a piece of software that performs some function.
`git` is one such command that facilitates access to a wide range of functions.

People outside of software development and (some) analysts find the command line arcane, but it provides an extremely useful set of tools that pay dividends if you make the effort to learn.

Nearly universally, if I use the word *terminal* I am referring to the operating system command line interface.

Windows refers to its CLI as the *command prompt*, and in macOS we have the *terminal*.

If you do not know how to operate your operating system CLI then you need to address that to make the most out of this text.

### Windows

You can do these tutorials to familiarise yourselves:

+ [How to use Windows 10's Command Prompt](https://www.youtube.com/watch?v=AF2q81CxYFI)
+ [Learning Windows Terminal](https://www.linkedin.com/learning/learning-windows-terminal/windows-terminal?u=2196204)

The following link needs admin rights (TKI people probably won't have nor will be able to obtain these rights) and is not strictly necessary here, but it gives a lot of useful commands and an opportunity to gain a bit more familiarity with the commandline.

+ [40 Windows Commands you NEED to know ](https://www.youtube.com/watch?v=Jfvg3CS1X3A)

### macOS

+ [How To Use Terminal On Your Mac](https://www.youtube.com/watch?v=FfT8OfMpARM)
+ [What Is the Mac Terminal?](https://www.youtube.com/watch?v=31ExRnh2cRs)
+ [Absolute BEGINNER Guide to the Mac OS Terminal](https://www.youtube.com/watch?v=aKRYQsKR46I)

### Extra credit

+ [Learn the command line](https://www.codecademy.com/learn/learn-the-command-line)


:::callout-note
The reason I haven't mentioned Linux is simply because for Linux oriented people, it is reasonable to assume that this level of competence has already been met.
:::

## Operating system management - environment variables etc

You will need to have some minimal technical competence in driving your computer.
For example, you need to know how to set an environment variable under your operating system of choice.
If you do not know how to set an environment variable, then you need to address that.

Other items that are important to be familiar with are file and directory concepts.
For example, if you do not know what the command `tree` does, then it might be useful for you to find out.
Similarly, if you do not know what file permissions are then, again, it would be useful to find out.

### Windows

You can do these tutorials to familiarise yourselves:

+ [Environment Variables : Windows 10](https://www.youtube.com/watch?v=z84UIZy_qgE)
+ [How to Set Environment Variables in Windows 11](https://www.youtube.com/watch?v=ow2jROvxyH4)

you should be able to set a user variable even if you do not have admin priviledges.

### macOS

+ [How to Set Environment Variables in MacOS](https://phoenixnap.com/kb/set-environment-variable-mac)
+ [PATH Variable (Mac)](https://www.youtube.com/watch?v=2J58Pc2ZOAQ)
+ [Use environment variables in Terminal on Mac
](https://support.apple.com/en-gb/guide/terminal/apd382cc5fa-4f58-4449-b20a-41c53c006f8f/mac)

## Operating system management

Create a directory on your machine where we will store all the files for this workshop.

Simply go to the your `Documents` directory and create a sub-dir called `get-going-with-git` (you can call it what you want, but this is going to be the location of our scratchpad and temp work).

Throughout this text, if I say go to your local workshop directory, this is the location I want you to go to.

## GitHub

Follow part 1 of the instructions provided by [Getting started with your GitHub account](https://docs.github.com/en/get-started/onboarding/getting-started-with-your-github-account) to create and configure your account.

::: callout-warning
The part on **configuring 2-factor authentication** is absolutely mandatory, the rest of the 2-factor content can be skimmed.
See [Configuring two-factor authentication](https://docs.github.com/en/authentication/securing-your-account-with-two-factor-authentication-2fa/configuring-two-factor-authentication).
:::


To use the USyd GitHub Enterprise Server, you will need a unikey. 
If you have a unikey, you should have access.
If you go [here](https://github.sydney.edu.au) you can confirm that you can login, but note that you will not require access to the Enterprise Server to complete this course. 

## OneDrive

It would be beneficial if you can install the desktop application for OneDrive so that you have file system integration (i.e. so that you can see your OneDrive through your file explorer app).

You may need to go to IT Support to get them to install OneDrive for you, but it may already be installed.




