---
title: "What is (this thing) called revision/version control?"
editor: source
---

```{r, echo = FALSE}
source("./R/init.R")
log_info("Called what-is-revision-control notebook")
```

## The big picture {#sec-what-is-big-pic}

Version control is any practice that allows you to track and manage the evolution of a project.

Remember filenames like `document_v3.docx`, `document_v3_20230101.docx`, `document_v3_20230101_ts.docx`?
That is a manual, informal and unstructure approached to version control.
You can tighten up the filenaming standards, but this approach is still very limited.
For example, simultaneous changes and merges are tedious, can involve double handling and are error prone.

A software implementation of revision control is a mechanism to understand a project/file history without having to used $N^q$ distinct filenames to identify the different versions.
Git is one of many revision control systems. 
In data science, IT and tech fields, it is the de-facto standard.
If you ever aspire to working in a technical role in one of those fields, you would need to learn git.

Irrespective, arguably, if you are collaborating, you should probably be using git.

When you get started with git, you will need to think about repositories, not to be confused with suppositories.
Repositories are where you project code is held.

Broadly, there are two types - *local* and *remote*.
The local ones are those that reside on your own machine. 
The remotes ones are off in the void somewhere, but they are linked and interact via `git` like this:

![Big picture](../fig/git-big-pic.jpg)

Remote repositories are hosted by service providers, the most common being GitHub, GitLab and Bitbucket.
We only deal with GitHub here.
GitHub comes in a few varieties: 

- GitHub Enterprise is hosted by the company called GitHub, see [github.com](https://github.com/). It is a commercial platform, but parts of it are made freely available.
- GitHub Enterprise Server is self-hosted; this is what USyd provides via [https://github.sydney.edu.au/](https://github.sydney.edu.au/)

In a nutshell, git provides a set of commands that allow you to manage the files that are retained in these local and remote repositories.

Again, I cannot sum it up better than Jenny, so please take the time to read it.

[Excuse Me, Do You Have a Moment to Talk About Version Control?](https://www.tandfonline.com/doi/full/10.1080/00031305.2017.1399928?needAccess=true)



## Why commandline

Because every other approach fundamentally rests on the workings of git.
While other approaches might abstract away from some of gits complexity, they also make some of the workings opaque.
By learning the commandline functions, you focus on what you actually need and when you use another approach, you will understand what it is trying to achieve.



